/** * Psd layers exporter * * @author Teguh Wijaya <jay@teguhwijaya.com> * @link http://www.teguhwijaya.com/ * @copyright Copyright &copy; 2012 Teguh Wijaya * @version 1.0 * Thanks to Brett Bibby (brettb@unity3d.com) for introducing me to jsx coding. *//** As a web developer I found it really tedious and counter-productive to have to cut and export layers in photoshop everytime I made even the smallest changes to the design. This script is designed to handle just that. Now you can simply open the document in photoshop, then double click this script, and walla all the layers are exported in a folder you specify. Features: 1. Group by layer sets then export each layer sets. 2. Multiple layer in a layer set? Can do. 3. Transparent layers? No problem. 4. Layer sets with opacity? Also can. 5. You can also export repeated images by defining width or height of layer set to be exported. 6. You can exclude some layers from exports too. How to export: Say if you have these layer sets: image1 |_ layer1 |_ layer2 |_ layer3 noexport |_ layer4 |_ layer5 xrepeat:1:- |_ layer6 yrepeat:-:2 |_ layer7 |_ layer8 xyrepeat:10:10 |_ layer9 noexport |_ layer10 Then when you run this script, you will get the following: 1. Exported files are image1,png, xrepeat.png, yrepeat.png, xyrepeat.png. noexport layer sets are not processed.    The name could be anything, obviously. 2. image1.png will be filled with layer1, layer2, and layer3 merged together, and yrepeat.png will be the same only    with layer7 and layer8. 3. xrepeat.png will have 1px width and height as big as the combination of images inside of it. The idea is    you should be able to use it with x-repeat ed background. 4. yrepeat.png will have 2px height. 5. xyrepeat.png will have 10px width x 10px height. */// enable double clicking from the Macintosh Finder or the Windows Explorer#target photoshop// setup global variablesvar sourcePsd;var duppedPsd;var destinationFolder;var objectId = 0;var debugFile;// run the exportermain();// main entry pointfunction main(){	// got a valid document?	if( app.documents.length <= 0 )	{		if(app.playbackDisplayDialogs != DialogModes.NO)		{			alert("You must have a document open to export!");		}		// quit, returning 'cancel' makes the actions palette not record our script		return 'cancel';	}	// ask for where the exported files should go	destinationFolder = Folder.selectDialog("Choose the destination for export.");	if(!destinationFolder)	{		return;	}	debugFile = new File(destinationFolder + "/debug.txt");	debugFile.open('w');	debugFile.writeln('start');	// cache useful variables	sourcePsdName = app.activeDocument.name; 	var layerCount = app.documents[sourcePsdName].layers.length;	var layerSetsCount = app.documents[sourcePsdName].layerSets.length;	if((layerCount <= 1)&&(layerSetsCount <= 0))	{		if(app.playbackDisplayDialogs != DialogModes.NO)		{			alert("You need a document with multiple layers to export!");			// quit, returning 'cancel' makes the actions palette not record our script			return 'cancel';		}	}	debugFile.writeln('before duplicating psd');	// duplicate document so we can extract everythng we need	duppedPsd = app.activeDocument.duplicate();	duppedPsd.activeLayer = duppedPsd.layers[duppedPsd.layers.length-1];	// clean it up	debugFile.writeln('about to hide all art layers');	hideAllArtLayers(duppedPsd);	debugFile.writeln('about to export layer sets');	exportLayerSets(duppedPsd);	debugFile.writeln('closing the file');	duppedPsd.close(SaveOptions.DONOTSAVECHANGES);	debugFile.close();}function exportLayerSets(psd){	for(var i = psd.layerSets.length-1; 0 <= i; i--)	{		var layerSet = psd.layerSets[i];		// filename could be "name:-:10" to make an image with layer width and 10px height.		var nameArray = layerSet.name.split(':')		debugFile.writeln('1');		var name = nameArray[0];		var width = nameArray[1];		var height = nameArray[2];		if (width == '-') width = null;		if (height == '-') height = null;		debugFile.writeln('2');		if (name != 'noexport' && layerSet.artLayers.length > 0) {			debugFile.writeln(layerSet);			debugFile.writeln('setting ' + layerSet.name + ' to visible');			layerSet.visible = true;			for (var j = 0; j < layerSet.artLayers.length; j++) {				var artLayer = layerSet.artLayers[j];				artLayer.visible = true;				duppedPsd.activeLayer = artLayer;			}			debugFile.writeln('4');			saveScenePng(duppedPsd.duplicate(), name, width, height);			debugFile.writeln('5');			for (var j = 0; j < layerSet.artLayers.length; j++) {				var artLayer = layerSet.artLayers[j];				artLayer.visible = false;			}			debugFile.writeln('6');		}	}}function saveScenePng(psd, fileName, fileWidth, fileHeight){	debugFile.writeln('a');	// we should now have a single art layer if all went well	//psd.flatten();	psd.mergeVisibleLayers();	psd.trim(TrimType.TRANSPARENT);		var width = psd.width.value;	if (fileWidth != null) {		width = fileWidth;	}	debugFile.writeln('b');	var height = psd.height.value;	if (fileHeight != null) {		height = fileHeight;	}			debugFile.writeln('c');		if (fileWidth != null || fileHeight != null) {		debugFile.writeln('crop with width ' + width + ' and height ' + height);		psd.resizeCanvas(width, height);	}		debugFile.writeln('g');	// save the image	var pngFile = new File(destinationFolder + "/" + fileName + ".png");	var pngSaveOptions = new PNGSaveOptions();	psd.saveAs(pngFile, pngSaveOptions, true, Extension.LOWERCASE);	psd.close(SaveOptions.DONOTSAVECHANGES);	debugFile.writeln('h');		}		function hideAllArtLayers(obj){	for(var i = 0; i < obj.artLayers.length; i++)	{		obj.artLayers[i].allLocked = false;		obj.artLayers[i].visible = false;	}	for( var i = 0; i < obj.layerSets.length; i++)	{		var type = obj.layerSets[i].name.split(':')[0];		if (type != 'noexport') {			hideAllArtLayers(obj.layerSets[i]);		}		else {			obj.layerSets[i].visible = false;		}	}}